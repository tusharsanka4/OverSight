from pydantic_ai import Agent, Tool
from pydantic_ai.common_tools.tavily import tavily_search_tool
from pydantic import Field
import os
from dotenv import load_dotenv
from rich.console import Console
from rich.panel import Panel
from rich.text import Text

# Imports for the Prediction Tool
from pyowm import OWM 
from tensorflow.keras.models import load_model
from joblib import load
import numpy as np
import pandas as pd # Used for compatibility with the scaler/model structure
import json # Used for compatibility with feature names

# Load environment variables
load_dotenv()

# --- 1. Setup and Global Constants ---
TAVILY_API_KEY = os.getenv('TAVILY_API_KEY')
OWM_API_KEY = os.getenv('OWM_API_KEY')

if not TAVILY_API_KEY or not OWM_API_KEY:
    print("Error: Ensure TAVILY_API_KEY and OWM_API_KEY are set in environment variables.")
    exit()

# --- 2. Model Loading (Happens ONCE when the script starts) ---
try:
    # Load the trained model, scaler, and feature names (generated by FFDetection.py)
    PREDICTOR_MODEL = load_model('flood_model.keras')
    PREDICTOR_SCALER = load('flood_scaler.joblib')
    
    with open('feature_names.json', 'r') as f:
        FEATURE_NAMES = json.load(f)
        
    NUM_FEATURES = len(FEATURE_NAMES)

    print(f"✅ Flood prediction model loaded successfully ({NUM_FEATURES} features).")
except Exception as e:
    print(f"❌ Error loading flood model components: {e}")
    print("Please run FFDetection.py first to generate 'flood_model.keras', 'flood_scaler.joblib', and 'feature_names.json'.")
    exit()

# --- 3. Tool Definitions ---

# A. Basic OWM Tool (Tool Name: get_current_weather)
class OpenWeatherMapTool(Tool):
    """A tool to get the current, simple weather conditions for a city (Temperature, Wind, Status)."""
    city: str = Field(description="The city name (e.g., 'London,GB').")

    # FIX 1: Renamed method to be unique: get_current_weather
    def get_current_weather(self, city: str) -> str:
        """Retrieves current weather data for the specified city."""
        try:
            owm = OWM(OWM_API_KEY)
            mgr = owm.weather_manager()
            observation = mgr.weather_at_place(city)
            w = observation.weather
            return (
                f"Current weather in {city}: Temperature is {w.temperature('celsius')['temp']:.1f}°C. "
                f"Conditions are '{w.detailed_status}'. Wind speed is {w.wind()['speed']:.1f} m/s."
            )
        except Exception as e:
            return f"Error: Could not retrieve weather for {city}. Details: {e}"

# B. Prediction Tool (Tool Name: predict_flood_risk)
class FloodPredictorTool(Tool):
    """A powerful tool that uses the trained ML model to predict flood risk based on key environmental factors."""
    
    # Define the inputs the LLM will provide based on what your training data (Kaggle) needs
    # Note: LLM can't guess categorical data, so we only ask for the numeric core features.
    rainfall_mm: float = Field(description="The current measured rainfall in millimeters (mm).")
    temperature_c: float = Field(description="The current measured temperature in Celsius (°C).")
    humidity_pct: float = Field(description="The current humidity percentage (0-100).")
    water_level_m: float = Field(description="The current water level in the nearby river or drainage basin (meters).")
    elevation_m: float = Field(description="The average elevation of the area (meters).")
    
    # FIX 2: Renamed method to be unique: predict_flood_risk
    def predict_flood_risk(self, rainfall_mm: float, temperature_c: float, humidity_pct: float, 
                           water_level_m: float, elevation_m: float) -> str:
        """Runs the saved TensorFlow model with the provided inputs and returns the probability."""

        # 1. Assemble features into a DataFrame (must match the scaler's fitted structure!)
        input_dict = {
            'Rainfall (mm)': rainfall_mm,
            'Temperature (°C)': temperature_c,
            'Humidity (%)': humidity_pct,
            'River Discharge (m³/s)': water_level_m, # Mapping river discharge to water_level_m for the tool input
            'Elevation (m)': elevation_m,
        }
        
        # Initialize a vector with dummy/default values (e.g., 0.5 or 0) for the 
        # features the LLM did *not* provide (Land Cover, Soil Type, Longitude, etc.)
        full_input_vector = {name: 0.0 for name in FEATURE_NAMES}
        
        # Overwrite the features the LLM provided
        for key, value in input_dict.items():
            if key in full_input_vector:
                full_input_vector[key] = value

        # Convert to DataFrame in the exact feature order the scaler expects
        df_input = pd.DataFrame([full_input_vector], columns=FEATURE_NAMES)

        # 2. Scale and Reshape
        scaled_input = PREDICTOR_SCALER.transform(df_input)
        # Reshape for LSTM (1 sample, 1 timestep, N features)
        reshaped_input = scaled_input.reshape(scaled_input.shape[0], 1, scaled_input.shape[1])
        
        # 3. Predict
        probability = PREDICTOR_MODEL.predict(reshaped_input)[0][0]
        
        # 4. Determine risk level
        risk_level = "HIGH" if probability > 0.80 else ("MEDIUM" if probability > 0.60 else "LOW")
        
        return (
            f"Prediction Complete: The model predicts a flood probability of {probability*100:.2f}%. "
            f"Current Risk Level: {risk_level}. (Prediction based on {NUM_FEATURES} environmental factors.)"
        )


# --- 4. Initialize Agent ---
console = Console()
agent = Agent(
    'groq:llama-3.3-70b-versatile', 
    
    tools=[
        tavily_search_tool(TAVILY_API_KEY), 
        
        # FIX 3: Use the uniquely named function pointer
        OpenWeatherMapTool(function=OpenWeatherMapTool.get_current_weather),
        
        # FIX 4: Use the uniquely named function pointer
        FloodPredictorTool(function=FloodPredictorTool.predict_flood_risk) 
    ], 
    instructions=(
        'You are a highly intelligent flood analysis assistant named OverSight. '
        'For current weather (Temp, Wind, Status), use the `OpenWeatherMapTool.get_current_weather`. '
        'For flood prediction, you **MUST** use the `FloodPredictorTool.predict_flood_risk` and extract all required numerical values from the user query. '
        'For all other queries, use the search tool. '
        'Keep your answers brief and professional.'
    ),
)

# --- 5. Start the Chat Loop ---
console.print(Panel(
    Text("Welcome to OverSight! I can check weather and run flood predictions. Type 'exit' to quit.", style="bold yellow"),
    title="Agent Chat",
    title_align="center"
))

while True:
    user_prompt = console.input("[bold green]You: [/]")
    
    if user_prompt.lower() == 'exit':
        console.print(Panel("Goodbye!", title="OverSight", style="bold red"))
        break

    try:
        console.print(Panel(
            Text("Thinking...", style="italic dim"), 
            border_style="dim"
        ))
        result = agent.run_sync(user_prompt)
        
        agent_output = result.output
        console.print(Panel(
            Text(f"{agent_output}", style="cyan"), 
            title="OverSight", 
            border_style="cyan"
        ))
    except Exception as e:
        console.print(Panel(
            Text(f"An error occurred: {e}", style="bold red"), 
            title="Error",
            border_style="red"
        ))